#pragma enable_d3d11_debug_symbols
#define PI 3.14159265358979323846

struct Particle
{
    float3 position;
	float3 velocity;
    float density;
};
RWStructuredBuffer<float3> particlePositions;
RWStructuredBuffer<Particle> particleRead;
RWStructuredBuffer<Particle> particleWrite;

////To be set from GPU controller
uint nParticles;
float time;
uint frame;
float viscosityCoefficient = 0.005;
float stiffnessCoefficient;
float tensionCoefficient;
float restDensity;
float3 gravityVector;
float timeStep = 0.0005;
uint particleMass= 1;

float normA=1.0;
float normB=0.0;

float BOX_SCALE;
float BOX_INFLUENCE;

float WPolyh = 0;
float WSpikyh = 0;
float WVisch = 0;

///Sorting
uint cellsResolution;
uint cellsRadius;

//cell -> particle idx
RWStructuredBuffer<uint2> particlesCellsRead;
RWStructuredBuffer<uint2> particlesCellsWrite;

RWStructuredBuffer<uint2> fixedParticleToCell;
RWStructuredBuffer<uint> cellsStartIndices;

//////////////////////

//////Util/////
uint pcg(uint v) {
	uint state = v * 747796405u + 2891336453u;
	uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
	return (word >> 22u) ^ word;
  }
  
float pcgf(uint v) {
return float(pcg(v))/float(0xffffffffu);
}
/////////////

///////Kernels

float WPoly(float3 deltaPos, float h){
	float dst = length(deltaPos);
    if (dst > 0 && dst <= h)
	{
		float coefA = 4.0 / (PI*pow(h, 8.0));
		float v = h*h - dst*dst;
		return coefA * pow(v, 3.0);
	}
	return float(0.0);
}

float3 WPolyGradient(float3 deltaPos, float h)
{
	float dst = length(deltaPos);
    if (dst > 0 && dst <= h)
	{
		float coefB = 24.0 / (PI * pow(h, 8.0));
		return -coefB * deltaPos * pow((h*h - dst*dst), 2.0);
	}
	return float3(0.0, 0.0, 0.0);
}

float WPolyLaplace(float3 deltaPos, float h)
{
	float dst = length(deltaPos);
    if (dst > 0 && dst <= h)
	{
		float coefC = 24.0 / (PI * pow(h, 8.0));
		return -coefC * (h*h - dst*dst) * (3*h*h - 7*dst*dst);
	}
	return float(0.0);
}

float3 WSpikyGradient(float3 deltaPos, float h)
{
	float dst = max(length(deltaPos), 0.0001);
    if (dst > 0 && dst <= h)
	{
		float coefB = 30.0 / (PI * pow(h, 5.0));
		return (-coefB * deltaPos * pow((h - dst), 2.0)) / dst;
	}
	return float3(0.0, 0.0, 0.0);
}

float WViscLaplace(float3 deltaPos, float h)
{
	float dst = length(deltaPos);
    if (dst > 0 && dst <= h)
	{
		float coefC = 20.0 / (PI * pow(h, 5.0));
		return -coefC * (h - dst);
	}
	return float(0.0);
}

float3 WViscGradient(float3 deltaPos, float h)
{
	float dst = length(deltaPos);
    if (dst > 0 && dst <= h)
	{
		float coefB = 10.0 / (PI * pow(h, 2.0));
	        float term1 = (-3.0 * dst) / (2.0 * pow(h, 3.0));
	        float term2 = 2.0 / pow(h, 2.0);
	        float term3 = h / (2.0 * pow(dst, 3.0));
	        return -coefB * deltaPos * (term1 + term2 - term3);
	}
	return float3(0.0, 0.0, 0.0);
}
/////////////

///////Forces
float GetDensityAtParticle(uint3 id)
{
	uint currentParticleIdx = id.x;
	float density = 0;
	uint2 particleCellCoords = fixedParticleToCell[currentParticleIdx];

	uint cellLeftStartIdx = max(0, particleCellCoords.x - cellsRadius);
	uint cellRightEndIdx = min(cellsResolution-1, particleCellCoords.x + cellsRadius);

	uint cellTopStartIdx = max(0, particleCellCoords.y - cellsRadius);
	uint cellBottomEndIdx = min(cellsResolution-1, particleCellCoords.y + cellsRadius);

	for(uint x = cellLeftStartIdx; x <= cellRightEndIdx; x++)
	{
		for(uint y = cellTopStartIdx; y <= cellBottomEndIdx; y++)
		{
			if(x == particleCellCoords.x && y == particleCellCoords.y){continue;}

			uint cellCoord = x + cellsResolution*y;
			for(uint neighbour = cellsStartIndices[cellCoord]; true; neighbour++)
			{
				if(particlesCellsWrite[neighbour].x != cellCoord){break;}

				density += WPoly(particleRead[currentParticleIdx].position - particleRead[particlesCellsWrite[neighbour].y].position, WPolyh);
			}
		}
	}

	return density * particleMass;
}

float3 GetGravityAtParticle(uint3 id)
{
	return particleMass * gravityVector;
}

float3 GetTensionNorm(uint3 id)
{
	uint currentParticleIdx = id.x;
	float3 newNorm = float3(0,0,0);

	uint2 particleCellCoords = fixedParticleToCell[currentParticleIdx];

	uint cellLeftStartIdx = max(0, particleCellCoords.x - cellsRadius);
	uint cellRightEndIdx = min(cellsResolution-1, particleCellCoords.x + cellsRadius);

	uint cellTopStartIdx = max(0, particleCellCoords.y - cellsRadius);
	uint cellBottomEndIdx = min(cellsResolution-1, particleCellCoords.y + cellsRadius);

	for(uint x = cellLeftStartIdx; x <= cellRightEndIdx; x++)
	{
		for(uint y = cellTopStartIdx; y <= cellBottomEndIdx; y++)
		{
			if(x == particleCellCoords.x && y == particleCellCoords.y){continue;}

			uint cellCoord = x + cellsResolution*y;
			for(uint neighbour = cellsStartIndices[cellCoord]; true; neighbour++)
			{
				if(particlesCellsWrite[neighbour].x != cellCoord){break;}

				float3 normContribution = WPolyGradient(particleRead[currentParticleIdx].position - particleRead[particlesCellsWrite[neighbour].y].position, WPolyh)/max(particleRead[particlesCellsWrite[neighbour].y].density, 0.0001);
				newNorm += normContribution;
			}
		}
	}

	return -1 * newNorm * particleMass;
}

float GetTensionLaplacian(uint3 id)
{
	uint currentParticleIdx = id.x;
	float newLaplacian = 0;

	uint2 particleCellCoords = fixedParticleToCell[currentParticleIdx];

	uint cellLeftStartIdx = max(0, particleCellCoords.x - cellsRadius);
	uint cellRightEndIdx = min(cellsResolution-1, particleCellCoords.x + cellsRadius);

	uint cellTopStartIdx = max(0, particleCellCoords.y - cellsRadius);
	uint cellBottomEndIdx = min(cellsResolution-1, particleCellCoords.y + cellsRadius);

	for(uint x = cellLeftStartIdx; x <= cellRightEndIdx; x++)
	{
		for(uint y = cellTopStartIdx; y <= cellBottomEndIdx; y++)
		{
			if(x == particleCellCoords.x && y == particleCellCoords.y){continue;}

			uint cellCoord = x + cellsResolution*y;
			for(uint neighbour = cellsStartIndices[cellCoord]; true; neighbour++)
			{
				if(particlesCellsWrite[neighbour].x != cellCoord){break;}

				float laplacianContribution = WPolyLaplace(particleRead[currentParticleIdx].position - particleRead[particlesCellsWrite[neighbour].y].position, WPolyh)/max(particleRead[particlesCellsWrite[neighbour].y].density, 0.0001);
				newLaplacian += laplacianContribution;
			}
		}
	}

	return newLaplacian * particleMass;
}

float3 GetTensionAtPoint(uint3 id)
{
	float3 norm = GetTensionNorm(id);
	return -tensionCoefficient * GetTensionLaplacian(id) * norm / max(length(norm), 0.0001);
}

float smoothstep(float x, float a, float b) {
    float frac = (x-a)/(b-a);
    float max = frac>0 ? frac : 0;
    float t = max<1 ? max : 1;
   
    return t*t*(3-2*t); 
}

float3 GetBoxNormalForce(uint3 curPoint) {
	float _box_start = BOX_SCALE - BOX_INFLUENCE;
    float3 force;
    float horizontal = smoothstep(abs(curPoint.x), _box_start, BOX_SCALE);
    float vertical = smoothstep(abs(curPoint.y), _box_start, BOX_SCALE);
    force.x = -curPoint.x * horizontal;
    force.y = -curPoint.y * vertical;
	force.z = 0;
    
    return force;
}

float3 GetAcelerationDueNormalAtParticle(uint3 id, float3 curAcceleration)
{
	Particle curParticle = particleRead[id.x];
	float dx = BOX_SCALE/2 - abs(curParticle.position.x);
	float dy = BOX_SCALE/2 - abs(curParticle.position.y);

	float factorx = smoothstep(dx, normA, normB);
	float factory = smoothstep(dy, normA, normB);

	float coefx = sign(curParticle.position.x) == sign(curAcceleration.x)? 1 : 0;
	float coefy = sign(curParticle.position.y) == sign(curAcceleration.y)? 1 : 0;

	float3 newAcceleration = float3(curAcceleration.x - (curAcceleration.x+sign(curAcceleration.x)*abs(dx))*factorx * coefx,curAcceleration.y - (curAcceleration.y+sign(curAcceleration.y)*abs(dy))*factory * coefy, 0);
	return newAcceleration;
}

float EquationOfState(float density, float restDensity)
{
	return stiffnessCoefficient * (density - restDensity);
}

float3 GetViscosityAtParticle(Particle currentParticle, uint currentParticleIdx)
{
	float3 viscosity;

	uint2 particleCellCoords = fixedParticleToCell[currentParticleIdx];

	uint cellLeftStartIdx = max(0, particleCellCoords.x - cellsRadius);
	uint cellRightEndIdx = min(cellsResolution-1, particleCellCoords.x + cellsRadius);

	uint cellTopStartIdx = max(0, particleCellCoords.y - cellsRadius);
	uint cellBottomEndIdx = min(cellsResolution-1, particleCellCoords.y + cellsRadius);

	for(uint x = cellLeftStartIdx; x <= cellRightEndIdx; x++)
	{
		for(uint y = cellTopStartIdx; y <= cellBottomEndIdx; y++)
		{
			if(x == particleCellCoords.x && y == particleCellCoords.y){continue;}

			uint cellCoord = x + cellsResolution*y;
			for(uint neighbour = cellsStartIndices[cellCoord]; true; neighbour++)
			{
				if(particlesCellsWrite[neighbour].x != cellCoord){break;}

				Particle targetParticle = particleRead[particlesCellsWrite[neighbour].y];
				float3 deltaPos = currentParticle.position - targetParticle.position;

				float weightV = WViscLaplace(deltaPos, WPolyh);
				float3 dir = deltaPos / max(length(deltaPos), 0.0001);
				float3 relativeVelocity = currentParticle.velocity - targetParticle.velocity;
				viscosity -= viscosityCoefficient * dot(relativeVelocity, dir) * weightV * WPolyGradient(deltaPos, WPolyh) * particleMass;;
			}
		}
	}
	
	return viscosity;
}

float3 GetPressureAtParticle(Particle currentParticle, uint currentParticleIdx)
{
	float3 newPressure;

	uint2 particleCellCoords = fixedParticleToCell[currentParticleIdx];

	uint cellLeftStartIdx = max(0, particleCellCoords.x - cellsRadius);
	uint cellRightEndIdx = min(cellsResolution-1, particleCellCoords.x + cellsRadius);

	uint cellTopStartIdx = max(0, particleCellCoords.y - cellsRadius);
	uint cellBottomEndIdx = min(cellsResolution-1, particleCellCoords.y + cellsRadius);

	for(uint x = cellLeftStartIdx; x <= cellRightEndIdx; x++)
	{
		for(uint y = cellTopStartIdx; y <= cellBottomEndIdx; y++)
		{
			if(x == particleCellCoords.x && y == particleCellCoords.y){continue;}

			uint cellCoord = x + cellsResolution*y;
			for(uint neighbour = cellsStartIndices[cellCoord]; true; neighbour++)
			{
				if(particlesCellsWrite[neighbour].x != cellCoord){break;}

				Particle targetParticle = particleRead[particlesCellsWrite[neighbour].y];
				float3 deltaPos = currentParticle.position - targetParticle.position;

				float weightP = WPoly(deltaPos, WPolyh);
				float density = 0.5 * (currentParticle.density + targetParticle.density);
				float pressure = EquationOfState(density, restDensity);
				pressure *= weightP;

				newPressure += pressure * deltaPos * particleMass;
			}
		}
	}
	return newPressure;
}

//need to add gradient spline kernel 
float3 CalculateAcceleration(uint3 particleId)
{
	uint currentParticleIdx = particleId.x;
	Particle currentParticle = particleRead[currentParticleIdx];

	float3 acceleration = float3(0,0,0);

	float3 newPressure = GetPressureAtParticle(currentParticle, currentParticleIdx);
	float3 newViscosity = GetViscosityAtParticle(currentParticle, currentParticleIdx);
	float3 newGravity = GetGravityAtParticle(particleId);
	float3 newTension = GetTensionAtPoint(particleId);

	acceleration += (newTension + newGravity + newViscosity + newPressure)/particleMass;

	//float3 normedAcceleration = GetAcelerationDueNormalAtParticle(particleId, acceleration);

	return acceleration;
}

#pragma kernel ParticleLoop 
[numthreads(64,1,1)]
void ParticleLoop(uint3 id : SV_DispatchThreadID)
{
	uint currentParticleIdx = id.x;
	if(currentParticleIdx >= nParticles){return;}

	Particle prevParticle = particleRead[currentParticleIdx];
	if(frame == 0)
	{
		prevParticle.velocity = float3(0.0,0.0,0.0);
		prevParticle.position = float3(pcgf(currentParticleIdx) * 20-4, pcgf(currentParticleIdx+7) * 10-4, 0.0);
		prevParticle.density = 1;

		particleRead[currentParticleIdx] = prevParticle;
	} else
	{
		float3 frameAcceleration = CalculateAcceleration(id);
		prevParticle.velocity += timeStep * frameAcceleration;
		prevParticle.position += prevParticle.velocity * timeStep;

		if(abs(prevParticle.position.x) > BOX_SCALE/2)
		{
			prevParticle.position.x = BOX_SCALE/2 * sign(prevParticle.position.x);
			prevParticle.velocity.x *= -1 * BOX_INFLUENCE;
		}
		if(abs(prevParticle.position.y) > BOX_SCALE/2)
		{
			prevParticle.position.y = BOX_SCALE/2 * sign(prevParticle.position.y);
			prevParticle.velocity.y *= -1 * BOX_INFLUENCE;
		}
	}

	particleWrite[currentParticleIdx] = prevParticle;
	particlePositions[currentParticleIdx] = prevParticle.position;

	uint cellSize = BOX_SCALE/cellsResolution;
	uint newCellIdx = floor(prevParticle.position.x / cellSize) + cellsResolution*floor(prevParticle.position.y / cellSize);

	fixedParticleToCell[currentParticleIdx] = uint2(floor(prevParticle.position.x / cellSize), floor(prevParticle.position.y / cellSize));
	particlesCellsWrite[currentParticleIdx] = uint2(newCellIdx, currentParticleIdx);
}

#pragma kernel ParticleDensity
[numthreads(64,1,1)]
void ParticleDensity(uint3 id : SV_DispatchThreadID)
{
	uint currentParticleIdx = id.x;
	if(currentParticleIdx >= nParticles){return;}

	Particle particle = particleRead[currentParticleIdx];

	float density = GetDensityAtParticle(id);

	particle.density = density;

	particleWrite[currentParticleIdx] = particle;
}

RWStructuredBuffer<uint> initRadixCounters;
uint passIdx;
uint nParticlesPerThread;
uint radixTuple = 8;

#pragma kernel CountRadixLocal
[numthreads(64,1,1)]
void CountRadixLocal(uint3 id : SV_DispatchThreadID)
{
	uint startIdx = id.x * nParticlesPerThread;
	uint endIdx = startIdx + nParticlesPerThread;

	uint nRadix = pow(2, radixTuple);

	uint radixGroupIdx = floor(id.x / 64) * nRadix;

	for(uint i = startIdx; i < endIdx; i++)
	{
		uint radixValue = (nRadix-1) & (particlesCellsRead[i].x >> (passIdx * radixTuple));
		uint radixIdx = radixGroupIdx + radixValue;

		InterlockedAdd(initRadixCounters[radixIdx], 1);
	}
}

RWStructuredBuffer<uint> radixToOffset; 
uint nCountersPerThread;

#pragma kernel RadixOffsetPrefixSum
[numthreads(64,1,1)]
void RadixOffsetPrefixSum(uint3 id : SV_DispatchThreadID)
{
	uint threadCountersStartIdx = id.x * nCountersPerThread;
	uint threadCountersEndIdx = threadCountersStartIdx + nCountersPerThread;
	uint nRadix = pow(2, radixTuple);

	for(uint i = threadCountersStartIdx; i < threadCountersEndIdx; i++)
	{
		uint localRadixCount = initRadixCounters[i];
		uint radixIdx = i % nRadix;
		for(uint j = radixIdx+1; j < nRadix; j++)
		{
			InterlockedAdd(radixToOffset[j], localRadixCount);
		}
	}
}

#pragma kernel SortMap
[numthreads(64,1,1)]
void SortMap(uint3 id : SV_DispatchThreadID)
{
	uint startIdx = id.x * nParticlesPerThread;
	uint endIdx = startIdx + nParticlesPerThread;
	uint nRadix = pow(2, radixTuple);

	for(uint i = startIdx; i < endIdx; i++)
	{
		uint radixIdx = (nRadix-1) & (particlesCellsRead[i].x >> (passIdx * radixTuple));
		uint2 particleToCells = particlesCellsRead[i];
		uint sortedArrIdx;
		InterlockedAdd(radixToOffset[radixIdx], 1, sortedArrIdx);

		particlesCellsWrite[sortedArrIdx] = particleToCells;
	}
}

#pragma kernel AssignCellRegions
[numthreads(64,1,1)]
void AssignCellRegions(uint3 id : SV_DispatchThreadID)
{
	uint startIdx = id.x * nParticlesPerThread;
	uint endIdx = startIdx + nParticlesPerThread;

	uint prevCellIdx = particlesCellsWrite[max(startIdx-1, 0)].x;
	for(uint i = startIdx; i < endIdx; i++)
	{
		uint currentCellIdx = particlesCellsWrite[i].x;
		particlesCellsRead[i] = particlesCellsWrite[i];
		if(currentCellIdx != prevCellIdx)
		{
			cellsStartIndices[currentCellIdx] = i;
			prevCellIdx = currentCellIdx;
		}
	}
}

#pragma kernel ClearCounters
[numthreads(64,1,1)]
void ClearCounters(uint3 id : SV_DispatchThreadID)
{
	uint threadCountersStartIdx = id.x * nCountersPerThread;
	uint threadCountersEndIdx = threadCountersStartIdx + nCountersPerThread;

	for(uint i = threadCountersStartIdx; i < threadCountersEndIdx; i++)
	{
		initRadixCounters[i] = 0;		
	}	
	radixToOffset[id.x % pow(2, radixTuple)] = 0;
}
